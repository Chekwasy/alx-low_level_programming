!<arch>
00-atoi.c/      0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
0-isupper.c/    0           0     0     644     329       `
#include "main.h"
#include "main.h"
/**
 * _isupper - Check description
 * Description: It tells if upper case
 * @c: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
int _isupper(int c)
{
	int n = 0;
	char a;

	for (a = 'A'; a <= 'Z'; a++)
	{
		if (a == c)
		{
			n = 1;
		}
	}
	return (n);
}

0-memset.c/     0           0     0     644     332       `
#include "main.h"
/**
 * _memset - Check description
 * Description: It tells if lower case
 * @s: - An input parameter
 * @b: - Another input paramer
 * @n: - 3rd  input parameter
 * Return: pointer s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int  i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-putchar.c/    0           0     0     644     302       `
#include <stdio.h>

/**
 * main - Entry point
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
char a = '_';
putchar(a);
a = 'p';
putchar(a);
a = 'u';
putchar(a);
a = 't';
putchar(a);
a = 'c';
putchar(a);
a = 'h';
putchar(a);
a = 'a';
putchar(a);
a = 'r';
putchar(a);
putchar('\n');
return (0);
}
0-strcat.c/     0           0     0     644     457       `
#include "main.h"
/**
 * _strcat - Check description
 * Description: It tells if lower case
 * @dest: - An input parameter
 * @src: - 2nd parameter
 * Return: char
 */

char *_strcat(char *dest, char *src)
{
	int a;
	int b;
	int c;
	char *retp;

	for (a = 0; *(src + a) != '\0'; a++)
	{

	}
	for (b = 0; *(dest + b) != '\0'; b++)
	{

	}
	for (c = 0; c < a; c++)
	{
		*(dest + b + c) = *(src + c);
	}
	*(dest + b + a) = '\0';
	retp = dest;
	return (retp);
}

100-atoi.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: the string to be comverted.
 *
 *Return: The integer value of the comverted string.
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     301       `
#include "main.h"
/**
 * _isdigit - Check description
 * Description: It tells if a digit
 * @c: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */

int _isdigit(int c)
{
	char n;
	int d = 0;

	for (n = '0'; n <= '9'; n++)
	{
		if (n == c)
			d = 1;
	}
	return (d);
}

1-memcpy.c/     0           0     0     644     337       `
#include "main.h"
/**
 * _memcpy - Check description
 * Description: It tells if lower case
 * @dest: - An input parameter
 * @src: - Input parameter
 * @n: - input parameter
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     496       `
#include "main.h"
/**
 * _strncat - Check description
 * Description: It tells if lower case
 * @src: - An input parameter
 * @dest: - d by a new line
 * @n: - input n
 * Return: char
 */
char *_strncat(char *dest, char *src, int n)
{
	int a;
	int b;
	int c;
	char *retp;

	for (a = 0; src[a] != '\0'; a++)
	{

	}
	for (b = 0; dest[b] != '\0'; b++)
	{

	}
	if (n <= a)
	{
		a = n;
	}
	for (c = 0; c < a; c++)
	{
		dest[b + c] = src[c];
	}
	*(dest + b + a) = '\0';
	retp = dest;
	return (retp);
}
2-strchr.c/     0           0     0     644     376       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - Locates a character in a string.
 * @s: The string to be searched.
 * @c: The character to be located.
 *
 * Return: If c is found - a pointer to the first occurence.
 * If c is not found - NULL.
 */

char *_strchr(char *s, char c)
{
	for (; *s >= '\0'; s++)
	{
		if (*s == c)
		{
			return (s);
		}
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     272       `
#include "main.h"
/**
 * _strlen - Check description
 * Description: It tells if lower case
 * @s: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
int _strlen(char *s)
{
	int i = 0;

	for (; *s != '\0'; s++)
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     609       `
#include "main.h"
/**
 * _strncpy - Check description
 * Description: It tells if lower case
 * @dest: - An input parameter
 * @src: - An input parameter
 * @n: - An input parameter
 * Return: char
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a;
	int b;
	int c;
	char *retptr;

	for (a = 0; dest[a] != '\0'; a++)
	{

	}
	for (b = 0; *(src + b) != '\0'; b++)
	{

	}
	if (n >= b)
	{
		for (c = 0; c < b; c++)
		{
			dest[c] = *(src + c);
		}
		for (; c < n; c++)
		{
			dest[c] = '\0';
		}
	}
	else
	{
		for (c = 0; c < n; c++)
		{
			dest[c] = *(src + c);
		}
	}
	retptr = dest;
	return (retptr);
}

3-islower.c/    0           0     0     644     303       `
#include "main.h"
/**
 * _islower - Check description
 * Description: It tells if lower case
 * @c: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
int _islower(int c)
{
char a;
int res = 0;

for (a = 'a'; a <= 'z'; a++)
{
if (c == a)
{
	res = 1;
}
}
return (res);
}

3-puts.c/       0           0     0     644     299       `
#include "main.h"
/**
 * _puts - Check description
 * Description: It tells if lower case
 * @str: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
void _puts(char *str)
{
	int i = 0;

	for (; *str != '\0'; str++)
	{
		_putchar(*str);
		i++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     378       `
#include "main.h"
/**
 * _strcmp - Check description
 * Description: It tells if lower case
 * @s1: - An input parameter
 * @s2: - An input parameter
 * Return: int
 */
int _strcmp(char *s1, char *s2)
{
	int a;
	int b;

	for (a = 0; s1[a] != '\0' || s2[a] != '\0'; a++)
	{
		if (s1[a] != s2[a])
		{
			b = s1[a] - s2[a];
			break;
		}
		else
		{
			b = 0;
		}
	}
	return (b);
}
3-strspn.c/     0           0     0     644     587       `
#include "main.h"
#include <string.h>

/**
 * _strspn - Gets the length of a prefix substring.
 * @s: The string to be searched.
 * @accept: The prefix to be measured.
 *
 * Return: The number of bytes in s which
 * consist only of bytes from accept.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	int a, b, d, e;

	d = strlen(s);
	e = strlen(accept);
	for (a = 0; a < d; a++)
	{
		for (b = 0; b <= e; b++)
		{
			if (*(s + a) == (*(accept  + b)))
			{
				c++;
				break;
			}
			else if (*(accept + b) == '\0')
			{
				return (c);
			}
		}
	}
	return (c);
}

4-isalpha.c/    0           0     0     644     387       `
#include "main.h"
/**
 * _isalpha - Check description
 * Description: It tells if lower case
 * @c: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
int _isalpha(int c)
{
	char a;
	int res = 0;

	for (a = 'a'; a <= 'z'; a++)
	{
		if (c == a)
		{
			res = 1;
		}
	}
	for (a = 'A'; a <= 'Z'; a++)
	{
		if (a == c)
		{
			res = 1;
		}
	}
	return (res);
}

4-puts.c/       0           0     0     644     176       `
#include <stdio.h>

/**
 * main - Entry point
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
puts("\"Programming is like building a multilingual puzzle");
return (0);
}
4-strpbrk.c/    0           0     0     644     545       `
#include "main.h"
#include <string.h>

/**
 * _strpbrk - Searches a string for any of a set of bytes.
 * @s: The string to be searched.
 * @accept: The set of bytes to be searched for.
 *
 * Return: If a set is matched - a pointer to the matched byte.
 * If no set is matched - NULL.
 */
char *_strpbrk(char *s, char *accept)
{
	int a;
	int b;
	int c;
	int d;

	c = strlen(s);
	d = strlen(accept);
	for (a = 0; a < c; a++)
	{
		for (b = 0; b < d; b++)
		{
			if (*(s + a) == *(accept + b))
			{
				return (s + a);
			}
		}
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     675       `
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: The string to be searched.
 * @needle: The substring to be located.
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 * If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	int index;

	if (*needle == 0)
		return (haystack);

	while (*haystack)
	{
		index = 0;

		if (haystack[index] == needle[index])
		{
			do {
				if (needle[index + 1] == '\0')
					return (haystack);

				index++;

			} while (haystack[index] == needle[index]);
		}

		haystack++;
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     294       `
#include "main.h"
/**
 * _abs - Check description
 * Description: It tells if lower case
 * @n: - An input parameter
 * d by a new line
 * Return: 1 when true and 0 when false
 */
int _abs(int n)
{
	int res;
		if (n <= 0)
	{
		res = n * -1;
	}
	if (n > 0)
	{
		res = n * 1;
	}
	return (res);
}
9-strcpy.c/     0           0     0     644     316       `
#include "main.h"

/**
 * _strcpy - Copy a string
 * @dest: Destination value
 * @src: Source value
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int a;
	char *retptr = dest;

	for (a = 0; *src != '\0'; a++)
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = '\0';
	return (retptr);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

